name: Health Check

on:
  schedule:
    - cron: '*/15 * * * *'  # Every 15 minutes
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to check'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
        - both

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: datadog-runner

jobs:
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Check Staging Environment
      if: github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'both' || github.event_name == 'schedule'
      run: |
        echo "🏥 Checking staging environment health..."
        
        # Update kubeconfig
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        
        # Check if namespace exists
        if ! kubectl get namespace staging &> /dev/null; then
          echo "⚠️  Staging namespace does not exist"
          exit 0
        fi
        
        echo "📊 Pod Status:"
        kubectl get pods -n staging
        
        echo ""
        echo "🔍 Checking pod health..."
        
        # Check if all pods are running
        NOT_RUNNING=$(kubectl get pods -n staging --no-headers | grep -v Running | wc -l)
        TOTAL_PODS=$(kubectl get pods -n staging --no-headers | wc -l)
        
        if [ $NOT_RUNNING -gt 0 ]; then
          echo "❌ $NOT_RUNNING out of $TOTAL_PODS pods are not running in staging"
          kubectl get pods -n staging --no-headers | grep -v Running
          exit 1
        else
          echo "✅ All $TOTAL_PODS pods are running in staging"
        fi
        
        # Check services
        echo ""
        echo "🌐 Service Status:"
        kubectl get services -n staging
        
        # Check ingress
        echo ""
        echo "🚪 Ingress Status:"
        kubectl get ingress -n staging

    - name: Check Production Environment
      if: github.event.inputs.environment == 'production' || github.event.inputs.environment == 'both'
      run: |
        echo "🏥 Checking production environment health..."
        
        # Update kubeconfig
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}
        
        # Check if namespace exists
        if ! kubectl get namespace production &> /dev/null; then
          echo "⚠️  Production namespace does not exist"
          exit 0
        fi
        
        echo "📊 Pod Status:"
        kubectl get pods -n production
        
        echo ""
        echo "🔍 Checking pod health..."
        
        # Check if all pods are running
        NOT_RUNNING=$(kubectl get pods -n production --no-headers | grep -v Running | wc -l)
        TOTAL_PODS=$(kubectl get pods -n production --no-headers | wc -l)
        
        if [ $NOT_RUNNING -gt 0 ]; then
          echo "❌ $NOT_RUNNING out of $TOTAL_PODS pods are not running in production"
          kubectl get pods -n production --no-headers | grep -v Running
          exit 1
        else
          echo "✅ All $TOTAL_PODS pods are running in production"
        fi
        
        # Check services
        echo ""
        echo "🌐 Service Status:"
        kubectl get services -n production
        
        # Check ingress
        echo ""
        echo "🚪 Ingress Status:"
        kubectl get ingress -n production

    - name: Health Check Summary
      if: success()
      run: |
        echo "🎉 Health check completed successfully!"
        
    - name: Notify on Failure
      if: failure()
      run: |
        echo "🚨 Health check failed!"
        echo "Please check the logs above for details."

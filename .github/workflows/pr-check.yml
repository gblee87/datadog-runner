name: PR Check

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_PREFIX: datadog-runner

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js for frontend
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend-react/package-lock.json
          services/chat-node/package.json

    - name: Set up Python for auth service
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Set up Java for ranking service
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Install frontend dependencies
      run: |
        cd frontend-react
        npm ci

    - name: Lint frontend code
      run: |
        cd frontend-react
        npm run lint || echo "⚠️ Frontend linting issues found"

    - name: Install chat-node dependencies
      run: |
        cd services/chat-node
        npm install

    - name: Install Python dependencies
      run: |
        cd services/auth-python
        pip install -r requirements.txt

    - name: Lint Python code
      run: |
        cd services/auth-python
        python -m flake8 app/ || echo "⚠️ Python linting issues found"

    - name: Test Java build
      run: |
        cd services/ranking-java
        ./mvnw clean compile || echo "⚠️ Java compilation issues found"

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test build auth-python
      uses: docker/build-push-action@v5
      with:
        context: ./services/auth-python
        platforms: linux/amd64
        push: false
        tags: test/auth-python:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test build chat-node
      uses: docker/build-push-action@v5
      with:
        context: ./services/chat-node
        platforms: linux/amd64
        push: false
        tags: test/chat-node:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test build ranking-java
      uses: docker/build-push-action@v5
      with:
        context: ./services/ranking-java
        platforms: linux/amd64
        push: false
        tags: test/ranking-java:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test build frontend-react
      uses: docker/build-push-action@v5
      with:
        context: ./frontend-react
        platforms: linux/amd64
        push: false
        tags: test/frontend-react:pr-${{ github.event.number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  manifest-validation:
    name: Validate Manifests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Validate Kubernetes manifests
      run: |
        echo "🔍 Validating Kubernetes manifests..."
        
        for file in ./infra/k8s/*.yaml; do
          echo "Validating $(basename "$file")..."
          kubectl apply --dry-run=client -f "$file" || echo "⚠️ Issues found in $(basename "$file")"
        done
        
        echo "✅ Manifest validation completed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [lint-and-test, build-test, manifest-validation, security-scan]
    if: always()
    
    steps:
    - name: PR Check Summary
      run: |
        echo "## 🔍 PR Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.lint-and-test.result }}" == "success" ]; then
          echo "✅ **Lint and Test**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Lint and Test**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build-test.result }}" == "success" ]; then
          echo "✅ **Build Test**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build Test**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.manifest-validation.result }}" == "success" ]; then
          echo "✅ **Manifest Validation**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Manifest Validation**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.security-scan.result }}" == "success" ]; then
          echo "✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Security Scan**: Issues found (check Security tab)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**PR #${{ github.event.number }}** is ready for review! 🚀" >> $GITHUB_STEP_SUMMARY
